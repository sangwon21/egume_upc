package com.upc.user.reqfrm.controller;

import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.upc.common.file.service.MemberFileService;
import com.upc.user.reqfrm.service.ReqFrmService;
import com.upc.user.reqfrm.vo.ReqFrmListVO;
import com.upc.user.reqfrm.vo.ReqFrmVO;
import com.upc.user.reqfrm.vo.SearchVO;
import com.upc.user.reqfrm.vo.UsrInfVO;

/**
 * 발급지원 작성 목록 조회 화면 제어
 * @author 이상원
 * @since 2018. 12. 14.
 * @version 1.0
 * @see 
 * 수정이력
 * 버전		수정일		수정자		수정내용
 * 1.1		18.12.18	이상원		다중 파일 업로드 기능 추가, file.do Post방식 처리 추가
 * 1.2		18.12.26	이수빈		파일 업로드 (파일 종류 값 추가)
 */
@Controller
@RequestMapping("/user/reqfrm/")
public class ReqFrmController {
	
	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ReqFrmController.class);
	
	@Autowired
	private ReqFrmService reqFrmService;
	
	@Autowired
	private MemberFileService fileService;
	
	@GetMapping("/web")
	public String requestWeb(Model model, Principal principal) {
		model.addAttribute("reqFrmVO", new ReqFrmVO());
		
		// 유저의 id를 얻어온 다음
		String prtnum = principal.getName();
		System.out.println(prtnum);
		UsrInfVO usrinfvo = reqFrmService.selectUser(prtnum);
		model.addAttribute("usrinfvo", usrinfvo);

		return "reqfrm/reqfrmWeb";
	}
	
	@PostMapping("/web")
	public String requestWebSubmit(@ModelAttribute ReqFrmVO reqFrmVO, 
		MultipartFile[] tax, MultipartFile[] sup, Principal principal) throws Exception {
		
		
		String prtnum = principal.getName();
		reqFrmVO.setAppmthd("Web");
		String applnum = reqFrmService.makeSeqNum();
		reqFrmVO.setApplnum(applnum);
		logger.info(applnum);
		
		reqFrmService.insertReqFrm(reqFrmVO, prtnum);
		
		
		for(MultipartFile file: tax) {
			if(file.isEmpty())
				continue;
			else {
				fileService.insertFile(prtnum, file, applnum, "세금계산서");
			}
		}
		
		for(MultipartFile file: sup) {
			if(file.isEmpty())
				continue;
			else {
				fileService.insertFile(prtnum, file, applnum, "수출근거서류");
			}
		}
		
	
		return "redirect:/user/reqfrm/list";
	}
	
	// 파일로 등록하기
	@GetMapping("/file")
	public String requestFile() {
		
		return "reqfrm/reqfrmFile";
	}
	
	@PostMapping("/file")
	public String requestFileSubmit(@ModelAttribute ReqFrmVO reqFrmVO, MultipartFile applfrm,MultipartFile[] tax, MultipartFile[] sup, Principal principal) throws Exception {
		
		String prtnum = principal.getName();
		
		reqFrmVO.setAppmthd("File");
		logger.info("reqFrmVO는 " + reqFrmVO.getAppmthd());
		String applnum = reqFrmService.makeSeqNum();
		reqFrmVO.setApplnum(applnum);
		
		if(!applfrm.isEmpty()) {
			String applfileid = fileService.insertFile(prtnum, applfrm, applnum, "발급신청서");
			reqFrmVO.setApplfileid(applfileid);
		}
		
		reqFrmService.insertReqFrm(reqFrmVO, prtnum);
		
		for(MultipartFile file: tax) {
			if(file.isEmpty())
				continue;
			else {
				fileService.insertFile(prtnum, file, applnum, "세금계산서");
			}
		}
		
		for(MultipartFile file: sup) {
			if(file.isEmpty())
				continue;
			else {
				fileService.insertFile(prtnum, file, applnum, "수출근거서류");
			}
		}
		return "redirect:/user/reqfrm/list";
	}
	
	@GetMapping("list")
	public String requestList(@ModelAttribute SearchVO searchVO, Model model, Principal principal) throws CloneNotSupportedException {
		
		String loginId = principal.getName();
		logger.info("in controller searchVO : " + searchVO);
		
		searchVO.setPrtnum(loginId);

		if (searchVO.getSearchStatus() == "") {
			searchVO.setSearchStatus("all");
		}
		
		if (searchVO.getDateCondition() == "") {
			searchVO.setDateCondition("appldt");
		}

		
		logger.info("end controller searchVO의 DateCondition은  : " + searchVO.getDateCondition());
		
		// 페이지에 처음 접속 시, 접수일자 조회일자를 1개월전~현재 로 세팅해줌
		if (searchVO.getDateFrom() == null && searchVO.getDateTo() == null) {
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyyMMdd");
			Date currentTime = new Date();
			String mTime = simpleDateFormat.format(currentTime);
			searchVO.setDateTo(mTime);

			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.MONTH, -1);
			searchVO.setDateFrom(simpleDateFormat.format(cal.getTime()));
		}
		
		List<ReqFrmListVO> lists = reqFrmService.selectReqFrmList(searchVO);
		
		for(ReqFrmListVO item : lists){
			if(item.getRgsttm() != null) {
				String newRgsttm = item.getRgsttm().substring(0, 10);
				item.setRgsttm(newRgsttm);
			}
			if(item.getAppldt() != null) {
				String newAppldt = item.getAppldt().substring(0, 10);
				item.setAppldt(newAppldt);
			}
        }
		
		model.addAttribute("loginId",loginId);
		model.addAttribute("list", lists);
		model.addAttribute("searchVO", searchVO);
		
		logger.info("end controller searchVO : " + searchVO);
		
		return "reqfrm/reqfrmList";
	}
	@GetMapping("updateStatus")
	public String returnSite() {
		return "redirect:/user/reqfrm/list";
	}
	
	
	@PutMapping("updateStatus")
	public @ResponseBody List<ReqFrmListVO> updateStatus(@RequestBody List<ReqFrmListVO> reqFrmListVO) throws Exception{
		
		logger.info("start updateStatus controller reqFrmListVO의 수정요청사항은 : " + reqFrmListVO.get(0).getSmplmdfreq());
		try {
			logger.info("컨트롤러에서 서비스 호출 reqFrmListVO : " );
			reqFrmService.updateSts(reqFrmListVO);
		}catch(Exception e) {
			throw e;
		}
		return reqFrmListVO;
	}
	
}
